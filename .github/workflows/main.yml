name: compile webGL

on:
  push:
    branches:
      - main

jobs:
  # front
  webgl_job:
    name: compile webgl unity
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
         # Cache
      # - uses: actions/cache@v2
      #   with:
      #     path: Library
      #     key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
      #     restore-keys: |
      #       Library-

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: WebGL

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules build/WebGL

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: Build-WebGL
          path: ${{ github.sha }}.tar.gz
  prepare-release-on-servers_webgl:
    name: Prepare release webgl
    runs-on: ubuntu-latest
    needs: webgl_job
    steps:
      - uses: actions/download-artifact@v2
        with:
          name:  Build-WebGL
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.QA_HOST_FRONTEND }}
          username: ${{ secrets.QA_HOST_FE_USERNAME }}
          password: ${{ secrets.QA_HOST_FE_PASSWORD }}
          source: ${{ github.sha }}.tar.gz
          target: artifacts
      - name: connect server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.QA_HOST_FRONTEND }}
          username: ${{ secrets.QA_HOST_FE_USERNAME }}
          password: ${{ secrets.QA_HOST_FE_PASSWORD }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "releases/${GITHUB_SHA}"
            tar xzf artifacts/${GITHUB_SHA}.tar.gz -C "releases/${GITHUB_SHA}"
            rm -r /var/www/webgl/ 2> /dev/null
            cp -r releases/${GITHUB_SHA}/build/WebGL/WebGL/* /var/www/webgl/
  # server
  server_job:
    name: compile server unix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: StandaloneLinux64
          customParameters: -EnableHeadlessModistde
        
      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules build/StandaloneLinux64
      - uses: actions/upload-artifact@v2
        with:
          name: Build-Linux-Server
          path: ${{ github.sha }}.tar.gz
      
  prepare-release-on-servers_unity:
    name: Prepare release unity
    runs-on: ubuntu-latest
    needs: server_job
    steps:
      - uses: actions/download-artifact@v2
        with:
          name:  Build-Linux-Server
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.QA_HOST_UNITY }}
          username: ${{ secrets.QA_HOST_USERNAME }}
          password: ${{ secrets.QA_HOST_PASSWORD }}
          source: ${{ github.sha }}.tar.gz
          target: artifacts
      - name: connect server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.QA_HOST_UNITY }}
          username: ${{ secrets.QA_HOST_USERNAME }}
          password: ${{ secrets.QA_HOST_PASSWORD }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "releases/${GITHUB_SHA}"
            tar xzf artifacts/${GITHUB_SHA}.tar.gz -C "releases/${GITHUB_SHA}"
            rm -r server 2>/dev/null
            mkdir server
            cp -r releases/${GITHUB_SHA}/build/StandaloneLinux64/StandaloneLinux64/* server