using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ModelSync
{
    [RealtimeProperty(1, true, true)]
    private string _shirts;
    [RealtimeProperty(2, true, true)]
    private string _heads;
    [RealtimeProperty(3, true, true)]
    private string _pants;
    [RealtimeProperty(4, true, true)]
    private string _shoes;
    [RealtimeProperty(5, true, true)]
    private string _extras;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class ModelSync : RealtimeModel {
    public string shirts {
        get {
            return _shirtsProperty.value;
        }
        set {
            if (_shirtsProperty.value == value) return;
            _shirtsProperty.value = value;
            InvalidateReliableLength();
            FireShirtsDidChange(value);
        }
    }
    
    public string heads {
        get {
            return _headsProperty.value;
        }
        set {
            if (_headsProperty.value == value) return;
            _headsProperty.value = value;
            InvalidateReliableLength();
            FireHeadsDidChange(value);
        }
    }
    
    public string pants {
        get {
            return _pantsProperty.value;
        }
        set {
            if (_pantsProperty.value == value) return;
            _pantsProperty.value = value;
            InvalidateReliableLength();
            FirePantsDidChange(value);
        }
    }
    
    public string shoes {
        get {
            return _shoesProperty.value;
        }
        set {
            if (_shoesProperty.value == value) return;
            _shoesProperty.value = value;
            InvalidateReliableLength();
            FireShoesDidChange(value);
        }
    }
    
    public string extras {
        get {
            return _extrasProperty.value;
        }
        set {
            if (_extrasProperty.value == value) return;
            _extrasProperty.value = value;
            InvalidateReliableLength();
            FireExtrasDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(ModelSync model, T value);
    public event PropertyChangedHandler<string> shirtsDidChange;
    public event PropertyChangedHandler<string> headsDidChange;
    public event PropertyChangedHandler<string> pantsDidChange;
    public event PropertyChangedHandler<string> shoesDidChange;
    public event PropertyChangedHandler<string> extrasDidChange;
    
    public enum PropertyID : uint {
        Shirts = 1,
        Heads = 2,
        Pants = 3,
        Shoes = 4,
        Extras = 5,
    }
    
    #region Properties
    
    private ReliableProperty<string> _shirtsProperty;
    
    private ReliableProperty<string> _headsProperty;
    
    private ReliableProperty<string> _pantsProperty;
    
    private ReliableProperty<string> _shoesProperty;
    
    private ReliableProperty<string> _extrasProperty;
    
    #endregion
    
    public ModelSync() : base(null) {
        _shirtsProperty = new ReliableProperty<string>(1, _shirts);
        _headsProperty = new ReliableProperty<string>(2, _heads);
        _pantsProperty = new ReliableProperty<string>(3, _pants);
        _shoesProperty = new ReliableProperty<string>(4, _shoes);
        _extrasProperty = new ReliableProperty<string>(5, _extras);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _shirtsProperty.UnsubscribeCallback();
        _headsProperty.UnsubscribeCallback();
        _pantsProperty.UnsubscribeCallback();
        _shoesProperty.UnsubscribeCallback();
        _extrasProperty.UnsubscribeCallback();
    }
    
    private void FireShirtsDidChange(string value) {
        try {
            shirtsDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHeadsDidChange(string value) {
        try {
            headsDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePantsDidChange(string value) {
        try {
            pantsDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireShoesDidChange(string value) {
        try {
            shoesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireExtrasDidChange(string value) {
        try {
            extrasDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _shirtsProperty.WriteLength(context);
        length += _headsProperty.WriteLength(context);
        length += _pantsProperty.WriteLength(context);
        length += _shoesProperty.WriteLength(context);
        length += _extrasProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _shirtsProperty.Write(stream, context);
        writes |= _headsProperty.Write(stream, context);
        writes |= _pantsProperty.Write(stream, context);
        writes |= _shoesProperty.Write(stream, context);
        writes |= _extrasProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Shirts: {
                    changed = _shirtsProperty.Read(stream, context);
                    if (changed) FireShirtsDidChange(shirts);
                    break;
                }
                case (uint) PropertyID.Heads: {
                    changed = _headsProperty.Read(stream, context);
                    if (changed) FireHeadsDidChange(heads);
                    break;
                }
                case (uint) PropertyID.Pants: {
                    changed = _pantsProperty.Read(stream, context);
                    if (changed) FirePantsDidChange(pants);
                    break;
                }
                case (uint) PropertyID.Shoes: {
                    changed = _shoesProperty.Read(stream, context);
                    if (changed) FireShoesDidChange(shoes);
                    break;
                }
                case (uint) PropertyID.Extras: {
                    changed = _extrasProperty.Read(stream, context);
                    if (changed) FireExtrasDidChange(extras);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _shirts = shirts;
        _heads = heads;
        _pants = pants;
        _shoes = shoes;
        _extras = extras;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
